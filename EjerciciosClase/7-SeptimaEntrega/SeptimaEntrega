Ejercicio 61. Explique la diferencia entre tipo abstracto de datos (TAD) y estructura de datos.

Mientras que el TAD es una referencia generica a un tipo de dato y los métodos con los que trabaja, la
estructura es su implementacion concreta para formar el comportamiento esperado.


Ejercicio 62. Explique qué es una lista y cuáles son sus operaciones típicas.

Una lista es un TAD en el que tenemos elementos guardados asociados a una posicion. Entre sus operaciones 
típicas esta el borrado, insertado y modificacion de un elemento. Todo esto se permite sobre cualquier elemento
conocida su posicion. Tambien permite buscar y conocer el numero de elementos.

Ejercicio 63. Explique las diferentes formas de implementar una lista.

Una lista puede ser implementado mediante memoria estatica y memoria dinamica. En el primer caso tenemos un bloque
contiguo de memoria en el que guardamos en cada posicion un dato. En el segundo, tenemos un espacio de memoria con la 
informacion referente a la posicion y la direccion del siguiente elemento.

Ejercicio 64. Explique las ventajas e inconvenientes del ArrayList frente al LinkedList.

En el caso de insercion el linked list debe modificar los punteros de posicion para apuntar al nuevo
dato. O(n). Para los arrayList en el peor de los casos, insercion al frente, tenemos un tiempo de insercion O(n) 
causado por el desplazamiento.

En el caso de acceso a elementos el arrayList es mas rapido. Tarda O(1) en acceder frente al O(n) del linkedList que debe recorrer
los diferentes nodos.

Donde el LinkedList es mas rapido es con la insercion a los extremos ya que tarda O(1) frente al O(n) que tarda el ArrayList
debido a el movimiento que debe hacer de las posiciones. Tambien como la memoria no tiene que ser contigua no sufre al expandirse
a tamaños menores.

Ejercicio 65. Examine los siguientes códigos fuente e identifique la relación entre ellos:
1. Collection.java.
2. List.java.
3. ArrayList.java.
4. LinkedList.java.

List extiende Collection y tanto ArrayList como LinkedList extiende a lista.

Ejercicio 66. Explique qué es una pila y cuáles son sus operaciones típicas.

Una pila es un TAD en el que el ultimo dato en entrar es el primero en salir (LIFO). Entre sus 
operaciones esta el peek() que nos devuelve el elemento en la cima, pop() que lo elimina de la cima y
push(elemento) que lo añade a la cima. isEmpty() y size() son tambien metodos relevantes.

Ejercicio 67. Indique dos aplicaciones en que se utilzan pilas.

Para las llamadas de un programa, las cuales se apilan una encima de otra.
Los editores de texto tambien usan pilas para conocer el orden en el que se han editado los datos (hacer /rehacer)

Ejercicio 68. Explique la relación existente entre el TAD lista y el TAD pila.

La pila solo permite el acceso al elemento en la cima, nada que ver con el libre acceso de la lista a cualquier elemento
dada su posicion. 


Ejercicio 69. Examine el código fuente de las clases Stack.java y Vector.java. Identifique la relación entre ellos y con ArrayList.java

El stack hereda de vector cuyo comportamiento es parecido al del ArrayList. Donde difieren es su comportamiento sincronizado o no.
El vector busca la sincronizacion para funcionar en entornos concurrentes.


Ejercicio 70. Ejecute y explique el siguiente código:
import java.util.Stack;
	public class DemoPilas{
		
		public static void main(String[] args){
			
			Stack<Integer> pila = new Stack<>();
			pila.push(1);
			pila.push(2);
			System.out.println(pila);
			System.out.println(pila.peek());
			pila.pop();
			System.out.println(pila);
		}
	}
Se añaden los valores 1 y 2, se imprime la pila completa (1,2), se imprime el valor en la cima con peek() [2] y se retira con pop(). De nuevo se imprime la pila [1].



Ejercicio 71. Explique qué es una cola y cuáles son sus operaciones típicas.

Las colas son TAD en el que el primer dato en entrar es el primero en salir (FIFO). Es decir, los elementos se añaden al final
de la fila. peek() nos devuelve el elemento al frente de la cola, enqueue(elemento) inserta un elemento al final de la cola
y dequeue() elimina el elemento al frente de la fila. 

Ejercicio 72. Indique tipos de aplicaciones en que se utilicen colas.

El propio sistema usa colas para determinar la cola de prioridad de ejecucion. Tambien lo encontramos en el envio de mensajes
entre elementos. Una cola de mensajes.

Ejercicio 73. Examine el código de la clase ArrayDequeue.java y explique cómo aplica la aritmética modular.

Por su caracteristica ciclica, en la que no hay un verdadero inicio y fin del array,
tomamos constancia de la vuelta que damos tomando el modulo resultante de la nueva posicion entre la capacidad de array.
De tal manera que cuando alcanzamos el final de nuestro espacio de memoria volvemos a empezar de nuevo.



Ejercicio 74. Ejecute y explique el siguiente código, y compare su comportamiento con el programa del ejercicio 69:
import java.util.ArrayDeque;
public class DemoColas{
	
	public static void main(String[] args){
		
		ArrayDeque<Integer> cola = new ArrayDeque<>();
		cola.add(1);
		cola.add(2);
		System.out.println(cola);
		System.out.println(cola.peek());
		System.out.println(cola.poll());
		System.out.println(cola);
	}
}

Se crea una cola y se añaden los elementos 1 y 2. Se imprimen estos valores por pantalla como [1,2], se muestra el valor al frente de la cola
en este caso el [1] y de nuevo lo mismo pero .poll lo retira. Finalmente se muestra la cola [2]